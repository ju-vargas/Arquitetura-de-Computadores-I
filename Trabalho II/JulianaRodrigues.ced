;******************************************************************************
;       NOME: JULIANA RODRIGUES DE VARGAS
;
;	Arquivo de Refer�ncia para o desenvolvimento do kernel.
;
;	Vers�o: 2022.1
;
;	�reas de mem�ria
;
;	0000 - 7FFF		_KERNEL
;					�rea de Kernel para implementa��o dos alunos
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das fun��es do kernel
;					*** CUIDADO! Esse vetor est� no meio da �rea de c�digo ***
;
;	8000 - FF7F		_APP
;					�rea onde ser� colocado o programa de aplica��o.
;					Esse programa vai fazer o acesso aos perif�ricos e interrup��es, atrav�s das fun��es do Kernel.
;
;	FF80 - FFBF 		_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;					
;******************************************************************************


_KERNEL:	equ	h0000
_VETTAB:	equ	h0100
_RESET:		equ	_VETTAB+H0100
_APP:		equ	h8000
_IOAREA16:	equ	hFF80
_IOAREA08:	equ	hFFC0
STACK:		equ h7FFF


;======================================================================================================
;	�rea reservada para os perif�ricos
;======================================================================================================

; Acesso em 16 bits
		org		_IOAREA16
		daw		[31]
IVET:	dw		0			; Vetor de interrup��o
						; endere�o da subrotina de tratamento da interrup��o

; Acesso em 8 bits
		org		_IOAREA08
		dab		[23]
TIMDT:	db		0			; Registro de programa��o do timer
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]		        ; Portas de acesso ao visor

;	
;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------
		org		_KERNEL
		jmp		_RESET


;------------------------------------------------------------------------------
;	Area do kernel com os vetores das fun��es do kernel
;------------------------------------------------------------------------------
		org		_VETTAB
		
		dw		getchar			; BYTE	getchar()
		dw		putchar			; void	putchar(BYTE c, WORD pos)
		dw		putmsg			; void	putmsg(BYTE *msg, WORD pos)
		dw		clr_visor		; void	clr_visor()
		dw		kbhit			; WORD	kbhit()
		dw		get_timer		; WORD	get_timer()
		dw		clr_timer		; void	clr_timer()
		dw		get_timer_on	; WORD	get_timer_on()
		dw		set_timer_on	; void	set_timer_on(WORD on)
		dw		get_speed		; WORD	get_speed()

		
;	
;------------------------------------------------------------------------------
;	C�digo de RESET (BOOT) do processador/interrup��o
;------------------------------------------------------------------------------
                org		_RESET
; 1) Desabilitar o sistema de interrup��es
; 2) Inicializar o stack pointer (SP = R6)
; 3) Inicializar as vari�veis internas usadas pelo sistema de interrup��es e perif�ricos (IVET, INTE, etc.)
; 4) Inicializar as vari�veis internas do kernel
; 5) Inicializar o teclado zerando o byte de estado (TECST, endere�o 65498)
; 6) Inicializar o timer
; 7) Limpar o visor
; 8) Habilitar interrup��es
; 9) Retornar para o programa de aplica��o com um desvio para o endere�o _APP da mem�ria

                clr             INTE
                mov             #STACK, R6 
                mov             #isr, IVET
                clr             VELOCIDADE
                clr             INTS
                clr             TECST
                mov             #5, TIMDT           ;5 ou 100?
                jsr             r7, clr_visor
                mov             #H83, INTE
		        jmp	_APP

;

; ======================================================================================================
; FUNCOES
; ======================================================================================================

;------------------------------------------------------------------------------
; BYTE	getchar()
; retorna qual a tecla digitada (em R0)
; eh bloqueante
;------------------------------------------------------------------------------
getchar:
                cmp             TECST, #h80     ; aqui, eu to testando se o TECST eh H80 (ou seja, esta ligado)
                bne             getchar         ; se nao for igual, volto para testar de novo (branch on not equal verifica se nao eh zero)

                mov             TECDT, R0       ; eh igual, logo, eu posso mover pro R0 
                clr             TECDT
                clr             TECST           ; nao posso esquecer de zerar o status     
                rts		r7                      ; fim da rotina 

		
;------------------------------------------------------------------------------
; void	putchar(BYTE c, WORD pos)
; recebe em R5 o caractere (ASCII) que vai ser colocado no visor 
; verificar se esta no intervalo correto (H20 (32) ate H7A (122))
; endereco do visor vai de FFDC(65500) a FFFF(65535)
; recebe em R4 a posi�ao do visor onde deve estar o caractere
;------------------------------------------------------------------------------
putchar:
                ; conferir se esta no endereco correto
                cmp             R5, #H20        ; o caractere que foi recebido - #H20
                                                ; caso seja menor que 0, o caractere � menor que h20 (err0)
                bmi             fim_putchar     ; significa que eh menor que h20, entao pula pro final
                cmp             R5, #H7A        ; faz R5 - 122; 
                                                ; caso seja maior que 0, eh porque R5 eh maior que 122 
                bgt             fim_putchar     ; significa que eh maior que 122, entao pula pro final

                ; conferir se eh mais ou menos, para nao colocar 
                cmp             R5, #'+'     ; vejo se eh um + que foi teclado
                beq             fim_putchar     ; se for, nao coloco na tela 

                cmp             R5, #'-'     ; se nao for, vejo se eh um -
                beq             fim_putchar     ; se for, nao coloco na tela 
                

                ; verificar se R4 esta entre 0 e 35
                cmp 		R4, #0
                blt 		fim_putchar     ; se r4 eh negativo ja vou pro fim
                
                cmp             R4,#35        	; faz 35 - o caractere que foi recebido
                                                ; caso seja maior ou igual a 0, o caractere eh menor que 35 (esta ok)
                                                ; caso o valor seja negativo, entao eh maior que 35  
                bgt		fim_putchar

                ; pra colocar no lugar correto do visor, preciso fazer um mov para o endere�o indexado in�cio do visor + valor em R4
                mov             R5, VISOR(R4)   
        
fim_putchar: 
		rts		r7

;		
;------------------------------------------------------------------------------
; void	putmsg(BYTE *msg, WORD pos)
; colocar no visor um string de caracteres (bytes), terminado por um byte H00
; preciso checar se eh H00, se for, eu pulo pro fim 
; recebe R5 com endereco do comeco da string 
; recebe R4 com a posicao do visor onde comeca a ser colocado o texto
; R4 so pode estar entre 0 e 35
;------------------------------------------------------------------------------

;a posicao do visor pode ir de 0 a 35 (h23)
;a string vai ate que o valor dentro de um desses enderecos seja 0 
;o caractere pode ir de #H20 ' ' e #h7A 'z'

putmsg:         ;mov             #VISOR, R4      ; coloco R4 na posicao inicial do visor
                dec             R5              ; quero pegar o byte menos significativo, entao volto um
                

putmsg_loop:    
                ; depois dos testes, hora de mover
                mov             (R5), R0        ; salvando em R0 o conteudo do caractere em R5
                inc             R5              ; agora, aumento R5 para ir para o prox end

                and             #hFF, R0
                beq             fim_putmsg      ; se for, eu vou pro final


                ; estou testando se o caractere esta no intervalo correto
                cmp             R0, #H20      ; faz caractere - H20
                                                ; se der negativo, caractere eh menor que H20
                bmi             fim_putmsg      ; se for  negativo, pula pro fim
                cmp             #h7A, r0      ; faz #H7A - caractere
                                                ; se der negativo, caractere eh maior que #h7a
                bmi             fim_putmsg      ; se for negativo, pula pro fim

                ; tambem preciso testar se a posicao do visor esta no intervalo correto (0 - H23)
                tst             R4
                                                ; se R4 for negativo, isto eh, menor q zero, vai pro final
                bmi             fim_putmsg          
                cmp             #H23, R4        ; faz H23 - R4
                                                ; se der negativo, eh maior que h23
                bmi             fim_putmsg      ; se for negativo, pula pro fim


                mov             R0, VISOR(R4)   ; 
                inc             R4
                br              putmsg_loop

fim_putmsg:
		rts		r7

;		
;------------------------------------------------------------------------------
; void	clr_visor()
; serve para limpar o visor, ou seja, encher de espacos (H20)
;------------------------------------------------------------------------------


; escrever espa�os de 65500 a 65535


clr_visor:
                mov             #VISOR, R3     ;vou salvar o visor no registrador
loop_visor: 
                mov             #H20, (R3)     ; coloca espa�o no primeiro end do visor
        
                cmp             R3, #HFFFF     ; ve se ja estou no ultimo endereco
                beq             fim_clr        ; se estou, vou pro final
                inc             R3             ; se nao, aumento um endereco e repito
                                        
                br              loop_visor 

fim_clr:     
                rts	        r7
                        

;		
;------------------------------------------------------------------------------
; WORD	kbhit()
; funcao que retorna se alguma tecla foi digitada
; retorno em R0
; se ha tecla, R0 = 0
; se NAO ha,   R0 = !0 
;------------------------------------------------------------------------------
kbhit:
                mov             #1, R0          ; deixo como se nao tivesse tecla digitada
                cmp             TECST, #H80     ; comparo pra ver se ha tecla 
                bne             fim_khbit       ; se nao ha mesmo, pulo pro final
                mov             #0, R0          ; se ha, coloco zero em r0 e sigo pro final

fim_khbit:
	            rts             r7

        ; ainda eh possivel fazer passando o valor de TECST pra R0 e subtraindo #H80

;------------------------------------------------------------------------------
; WORD	get_timer()
; devolve o valor atual do TIMER em RO
;------------------------------------------------------------------------------
get_timer:

        ; acredito que vou conseguir o valor do timer por outro lugar, entao, aqui eh s� devolver essa variavel
                mov             VAR_TIMER, r0   ; TIMER eh uma vari�vel, um contador! 
		rts		r7






;------------------------------------------------------------------------------
; void	clr_timer()
;------------------------------------------------------------------------------
clr_timer:
        ; acredito que vou conseguir o valor do timer por outro lugar, entao, aqui eh s� devolver essa variavel ZERADA
                clr             VAR_TIMER           ; zerando o contador TIMER 
		rts		r7


;------------------------------------------------------------------------------
; WORD	get_timer_on()
;------------------------------------------------------------------------------
get_timer_on:

                mov             INTE, R0        ; verifico o ultimo digito (do timer) do interrupt enable
                and             #H01, R0          ; se ele estiver on, entao o timer esta on
		rts		r7


;------------------------------------------------------------------------------
; void	set_timer_on(WORD on)
; funcao para definir o estado do timer 
; recebe R5
; se R5 for 0, PARA o TIMER. se for DIFERENTE de 0, LIGA o TIMER
;------------------------------------------------------------------------------
set_timer_on:
		
                and             #HFE, INTE      ; aqui, eu ja desligo o timer, como se o valor fosse 0 (FE = 1111 1110)
                tst             R5              ; uso o tst pra saber se r5 tem 0
                beq             fim_set         ; se realmente tem zero, vou pular para o fim

                or              #H01, INTE        ; se nao for zero, eu vou ligar de novo

fim_set:        rts		r7
		
;		
;------------------------------------------------------------------------------
; WORD	get_speed()
; informacoes sobre a velocidade do veiculo controlado pelo programa
; r0 devolve a velocidade atual (entre 0 e 1)
; retorna a velocidade do usuario, que eh controlada por + e -
; a velocidade vem da infos da interrup��o
;------------------------------------------------------------------------------
get_speed:
                mov             VELOCIDADE, R0 ; Vou mover o valor da variavel velocidade para o R0
		rts		r7
		


;===================================================================================================
; Rotina de INTERRUPCAO
; So sera chamada se as interrupcoes estiverem habilitadas
;===================================================================================================
isr:
		mov		R0,-(R6)	; Salva registradores 
		mov		R1,-(R6)
		mov		R2,-(R6)
		mov		R3,-(R6)
		mov		R4,-(R6)
                mov             R5,-(R6)


        ;codigo alterado para saber se eh do timer ou teclado
	        
                mov		INTS,R0		; Verifica se eh interrupcao do TECLADO
		and		#2,R0           ; mascara AND pra ver se o digito 1 esta ligado (ou seja, forma 2 em binario)
		beq		ISR2            ; se for 0, nao eh do teclado
		jsr		r7,ISRtec	; Tratamento da INT do TECLADO
		and		#hFFFD,INTS	; Desliga bit de INT do teclado


ISR2:
        ;usando aqui pra verifificar se eh interrup��o do timer, se veio pra ca j� nao eh do timer 
                mov		INTS,R0		; Verifica se eh interrupcao do TIMER
		and		#1,R0           ; mascara AND pra ver se o digito 0 esta ligado 
		beq		cont            ; se for 0, nao eh do TIMER, continuo
		jsr		r7,ISRtim	; Tratamento da INT do TIMER
		and		#hFFFE,INTS	; Desliga bit de INT do TIMER
 

cont:
		mov             (R6)+,R5        ; Retorna os registradores da pilha
                mov		(R6)+,R4	
		mov		(R6)+,R3
		mov		(R6)+,R2
		mov		(R6)+,R1
		mov		(R6)+,R0

		rti				; Return From Interrupt


; Tratamento das interrupcoes de timer *****************************************************************
ISRtim:


                add             TIMDT, VAR_TIMER; se foram 10 notificacoes, vou adicionar 1 segundo ao timer
		
		
ISRtim_Fim:
                mov             #H0, INTS       ; nao posso esquecer de zerar a notificacao do timer
		rts		r7	        
		
	
; Tratamento das interrupcoes de teclado *************************************************************** 
ISRtec: 
                tst             TECST           ; v� se uma tecla foi teclada
                                                ; posso, inclusive, aqui verificar qual tecla que foi 
                beq             ISRtec_Fim      ; se nao foi teclado, vou pro final (nao faz sentido, pq se entra aqui eh teclada)


                ;aqui, � como eu vou LIDAR com o teclado

                cmp             TECDT, #'+'     ; vejo se eh um + que foi teclado
                beq             more_speed      ; se for, vou aumentar a velocidade 

                cmp             TECDT, #'-'     ; se nao for, vejo se eh um -
                beq             less_speed      ; se for, vou diminuir a velocidade 

                jmp             ISRtec_Fim      ; se nao for nada, nao faco nada


                ; AQUI, EU PRECISO SETAR PARA MUDAR A VELOCIDADE COM + ou -
        
more_speed:     
                cmp             #H64, VELOCIDADE; verificando se a velocidade ja nao eh 100
                beq             ISRtec_Fim      ; se for 100, entao nao vou aumentar mais nada, so ir pro fim  
                add             #H01, VELOCIDADE; aumento 1 na variavel velocidade
                jmp             ISRtec_Fim


less_speed:     
                cmp             #H0, VELOCIDADE ; verificando se a velocidade nao eh 0
                beq             ISRtec_Fim      ; se for zero, nao faco nada e vou pro fim
                sub             #H01, VELOCIDADE; subtraio 1 da variavel velocidade
                jmp             ISRtec_Fim      


ISRtec_Fim: 
 ;               mov             #H0, TECST       ; nao posso esquecer de zerar o TECST  
                rts             r7               ; volto de onde vim

; ======================================================================================================


		
;
;**************************************************************************************************
; Variaveis do programa
; Ocupam a memoria logo apos o final do programa		
;


;VISOR:          daw     65500
VAR_TIMER:      dw      0
VELOCIDADE:     dw      0
NTS_TIMER:      dw      0

ORG H7FFF
;STACK:           db      0
