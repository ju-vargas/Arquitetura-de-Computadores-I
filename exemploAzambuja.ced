 
;
;**************************************************************************************************
; Programa a_nimado:
;	- Faz a letra "A" "andar" pelo visor, parando/continuando sempre que for digitado SPACE
;	- O programa baseia-se na opera��o de tr�s rotinas: Animacao, Controle e Wait
;		- Animacao
;			Responsavel por realizar a movimenta��o do "A", controlando o final do visor
;			A anima��o s� ocorre se o flag ANDAR estiver ligado
;			Cada vez que a rotina � chamada, a letra "A" anda uma posi��o para a direita
;		- Controle
;			Responsavel por determinar se a anima��o deve parar ou n�o
;			Para isso, a rotina liga ou desliga o flag ANDAR
;		- Wait: respons�vel por controlar o tempo entre dois "passos" do "A"
;			Essa rotina bloqueia o processamento por um tempo determinado
;			Isso impede que as outras duas rotinas sejam chamadas, por um determinado tempo
;			S�o tr�s vers�es dessa rotina
;				- Wait_1: Sem tempo (velocidade maxima)
;				- Wait_2: Com tempo, determinado por la�o de instru��es (o n�mero de la�os est� no R5)
;				- Wait_3: Com tempo, determinado por interrup��o de timer (o n�mero de interrup��es a serem contadas est� em R5)
;
;	- Para alterar a configura��o, deve-se configurar o seguinte
;		<<1>> Configurar a habilita��o das interrup��es (mov #xxx, INTE)
;		<<2>> Selecionar a fun��o de Wait: Wait_1, Wait_2 ou Wait_3
;
;	Configura��es
;		- animado_1 => Wait_1
;			- mov #0,INTE
;			- Wait_1
;		- animado_2 => Wait_2
;			- mov #0,INTE
;			- Wait_2 (a constantes est� em R5)
;		- animado_3 => Wait_3
;			- mov #h81,INTE
;			- Wait_3 (anda o "A" com uma velocidade fixa e exata, programada em R5)
;
;**************************************************************************************************
;


;==========================================================================
; �rea Reservada

; Acesso em 16 bits
		org		hff80
STACK:
		daw		[31]		; �rea reservada
IVET:	dw		0			; Vetor de interrup��o

; Acesso em 8 bits
		dab		[24]
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]		; Portas de acesso ao visor


;==========================================================================
;
		org		0

;
;**************************************************************************************************
; R5 � usado para determinar a temporiza��o das rotinas Wait_2 e Wait_3
; Observer que R5 est� sendo usado �nica e exclusivamente para essa tarefa
; Por esse motivo, n�o � necess�rio salv�-lo quando entrar na ISR
		mov		#5,r5
		
;
;**************************************************************************************************
; Inicializa o processador e o hardware		
		mov		#STACK,r6
		clr		INTS			; Reset pedidos de interrup��o
		clr 	TECST			; Reset estado do hardware do teclado
		mov		#isr,IVET		; Set Interrupt Service Rotine
		
;
;**************************************************************************************************
; Inicializa variaveis de opera��o das rotinas do programa
		mov		#1,ANDAR			; ANDAR = 1
		mov		#VISOR,POSICAO		; POSICAO = VISOR
		
		mov		r5,TICKCNT
		
;
;**************************************************************************************************
; Programa principal
; <<1>> Configurar a habilita��o das interrup��es (mov #xxx, INTE)
		mov		#h81,INTE		; Habilita as interrup��es necess�rias: TECLADO=0x82   TIMER=0x81
main:
		jsr		r7,Animacao
		jsr		r7,Controle
		jsr		r7,Wait
		jmp		main
		
		
;
;**************************************************************************************************
; Rotina de anima��o - respons�vel por fazer o "A" andar
; Utiliza a vari�vel ANDAR para decidir se deve ou n�o andar
;	ANDAR==0 -> n�o andar
;	ANDAR==1 -> andar
Animacao:
		mov		#'_',r1			; R1 = "_"
		tst		ANDAR			; if (ANDAR) {
		beq		Animacao_Fim
		
		mov		POSICAO,r0		;		*POSICAO = ' ';
		mov		#' ',(r0)
		
		inc		r0				;		++POSICAO;
		bne		Animacao_Inc	;		if (POSICAO==0)
		mov		#VISOR,r0		;				POSICAO = VISOR;
Animacao_Inc:
		mov		r0,POSICAO
		
		mov		#'A',r1			;		R1 = 'A'
		
Animacao_Fim:					; }
		mov		POSICAO,r0		; *POSICAO = R1;
		mov		r1,(r0)
		rts		r7				; return;

;
;**************************************************************************************************
; Rotina de leitura de teclado
; Se n�o tiver tecla, simplesmente retorna
; Se tiver tecla, verifica se � SPACE
; Se for SPACE, inverte o flag ANDAR
;
Controle:
		jsr		r7,TeclaDisponivel	; if (TeclaDisponivel()) {
		tst		r0
		beq		Controle_Fim
		
		jsr		r7,GetTecla			;		if (GetTecla()==' ')
		cmp		r0,#' '		
		bne		Controle_Fim
		
		clr		r0					;				ANDAR = not(ANDAR)
		tst		ANDAR
		bne		Controle_Not
		mov		#1,r0
Controle_Not:
		mov		r0,ANDAR
	
Controle_Fim:						; }
		rts		r7					; return
		
;
;**************************************************************************************************
; Rotinas para a manipula��o do hardware e interrup��o (se houver) do teclado
; TeclaDisponivel	-> Rotina que informa se algo foi digitado
; GetTecla			-> Rotina que retorna a tecla digitada

;
; Rotina que informa se algo foi digitado
TeclaDisponivel:
		mov		TECST,r0
		rts		r7

;
; Rotina que retorna a tecla digitada
GetTecla:
		mov		TECDT,r0
		clr		TECST
		rts		r7
		
;
;**************************************************************************************************
; Rotina "bloqueante" que controla o tempo entre "passos" do "A" no visor
; Existem 3 vers�es

; <<2>> Selecionar a fun��o de Wait: Wait_1, Wait_2 ou Wait_3
;Wait:	jmp		Wait_1
;Wait:	jmp		Wait_2
Wait:	jmp		Wait_3

;
; Vers�o 1 - Sem controle de tempo (velocidade m�xima)
Wait_1:
		rts		r7
		
;
; Vers�o 2 - Controle de tempo por la�o de instru��es
; Entra: r5 -> constante que define o atraso de tempo
Wait_2:
		mov		r5,r0
Wait_2_loop:
		dec		r0
		bne		Wait_2_loop
		rts		r7
		
;
; Vers�o 3 - Controle de tempo por monitora��o da interrupcao
; Entra: TICK -> flag que indica quando passou 1 segundo (gerado pela Interrup��o)
; Obs: A interrup��o de timer deve estar ativa
Wait_3:
		tst		TICK
		beq		Wait_3
		clr		TICK
		rts		r7
		
		
;
;**************************************************************************************************
; Rotina de INTERRUP��O
; S� ser� chamada se as interrup��es estiverem habilitadas
isr:
		mov		r0,-(r6)	; Salva registradores (n�o � necess�rio salvar o R5)
		mov		r1,-(r6)
		mov		r2,-(r6)
		mov		r3,-(r6)
		mov		r4,-(r6)

		mov		INTS,r0		; Verifica se � INT do TIMER
		and		#1,r0
		beq		ISR2
		jsr		r7,ISRtim	; Tratamento da INT do TIMER
		and		#hFFFE,INTS	; Desliga bit de INT TIMER
ISR2:

		mov		(r6)+,r4	; Retorna os registradores da pilha
		mov		(r6)+,r3
		mov		(r6)+,r2
		mov		(r6)+,r1
		mov		(r6)+,r0

		rti					; Return From Interrupt
	
; Tratamento das interrup��es de timer
ISRtim:
		dec		TICKCNT				; if (--TICKCNT==0) {
		bne		ISRtim_Fim
		mov		r5,TICKCNT			;		TICKCNT = r5
		
		mov		#1,TICK				;		TICK = 1
		
ISRtim_Fim:
		rts		r7					; }
		
		
;
;**************************************************************************************************
; Variaveis do programa
; Ocupam a mem�ria logo ap�s o final do programa		
;
TICKCNT:	dw		0		; Variavel usada para contar o n�mero de interrup��es de temporiza��o
TICK:		dw		0		; Flag que indica que passou 1 segundo, ap�s o ultimo TICK
ANDAR:		dw		0		; Flag que indica se a anima��o esta ligada (!=0) ou n�o (==0)
POSICAO:	dw		0		; Endere�o no visor da posi��o atual onde o 'A' est� aparecendo
